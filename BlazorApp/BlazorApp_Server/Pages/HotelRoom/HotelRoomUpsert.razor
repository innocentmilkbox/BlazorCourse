@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Models
@using Business.Repository.IRepository
@using BlazorApp_Server.Service.IService
@inject IHotelRoomRepository hotelRoomRepository
@inject IHotelRoomImageRepository hotelroomImageRepository
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject IFileUpload fileUploadService
@*@attribute [Authorize]*@

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3 col-12">@Title Hotel Room</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@HotelRoomModel" OnValidSubmit="@HandleHotelRoomUpsert">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    @*<ValidationSummary></ValidationSummary>*@
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="HotelRoomModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelRoomModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>HotelRoomModel.Occupancy"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Regular Rate</label>
                        <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>HotelRoomModel.RegularRate"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Size(sq ft.)</label>
                        <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelRoomModel.SqFt"></ValidationMessage>
                    </div>
                    <div class="form-group" style="height:250px;">
                        <label>Details</label>
                        @*<InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control"></InputTextArea>*@

                        <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Enter room details">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>

                            </EditorContent>
                        </BlazoredTextEditor>

                        <ValidationMessage For="()=>HotelRoomModel.Details"></ValidationMessage>
                    </div>
                    <div class="form-group" style="padding-top:70px;">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                        <div class="row">
                            @if (IsImageUploadProcessStarted)
                            {
                                <div class="col-md-12">
                                    <span><i class="fas fa-spin fa-spinner"></i> Please wait... Images are uploading...</span>
                                </div>
                            }
                            @if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                            {
                                int serial = 1;
                                foreach (var roomImageUrl in HotelRoomModel.ImageUrls)
                                {
                                    <div class="col-md-2 mt-3">
                                        <div class="room-image" style="background: url('@roomImageUrl') 50% 50%">
                                            <span class="room-image-title">@serial</span>
                                        </div>
                                        <button @onclick="(() => DeletePhoto(roomImageUrl))" type="button" class="btn btn-outline-danger btn-block mt-4">Delete</button>
                                    </div>
                                    serial++;
                                }

                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Room </button>
                        <NavLink href="/hotel-room" class="btn btn-secondary">Back To Room List</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    private HotelRoomDTO HotelRoomModel { get; set; } = new HotelRoomDTO();
    private HotelRoomImageDTO hotelRoomImageDTO { get; set; } = new HotelRoomImageDTO();
    private string Title { get; set; } = "Create";
    private List<string> DeleteImageUrls { get; set; } = new List<string>();
    private bool IsImageUploadProcessStarted { get; set; } = false;

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

    protected async override Task OnInitializedAsync()
    {
        //return base.OnInitializedAsync();
        //authentication
        var authenState = await authenticationState;
        //if (!authenState.User.Identity.IsAuthenticated)
        if (!authenState.User.IsInRole(Common.SD.Role_Admin))
        {
            var uri = new Uri(navigationManager.Uri);
            navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");

        }
        if (Id != null)
        {
            //update
            Title = "Update";
            HotelRoomModel = await hotelRoomRepository.GetHotelRoom(Id.Value);
            if (HotelRoomModel?.HotelRoomImages != null)
            {
                HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(u => u.RoomImageUrl).ToList();
            }
        }
        else
        {
            //create
            HotelRoomModel = new HotelRoomDTO();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(HotelRoomModel.Details))
                {
                    await this.QuillHtml.LoadHTMLContent(HotelRoomModel.Details);
                }
                loading = false;
            }
            catch (Exception ex)
            {
                await Task.Delay(10);
                loading = true;
            }
        }

        //return base.OnAfterRenderAsync(firstRender);
    }

    private async Task HandleHotelRoomUpsert()
    {
        var roomDetailsByName = await hotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);
        if (roomDetailsByName != null)
        {
            await jsRuntime.SwalFailure("Room name aldeady exists.");
            return;
        }
        try
        {
            if (HotelRoomModel.Id != 0 && Title == "Update")
            {
                HotelRoomModel.Details = await QuillHtml.GetHTML();
                var updateRoomResult = await hotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
                if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                {
                    if (DeleteImageUrls != null && DeleteImageUrls.Any())
                    {
                        foreach (var img in DeleteImageUrls)
                        {
                            var imageName = img.Replace($"{navigationManager.BaseUri}RoomImages/", "");
                            var result = fileUploadService.DeleteFile(imageName);
                            await hotelroomImageRepository.DeleteRoomImageByImageUrl(img);
                        }
                    }

                    await AddHotelRoomImage(updateRoomResult);
                }
                await jsRuntime.SwalSuccess("Update Success.");
            }
            else
            {
                HotelRoomModel.Details = await QuillHtml.GetHTML();
                var createResult = await hotelRoomRepository.CreateHotelRoom(HotelRoomModel);
                await AddHotelRoomImage(createResult);
                await jsRuntime.SwalSuccess("Create Success.");
            }
        }
        catch (Exception ex)
        {

        }
        navigationManager.NavigateTo("hotel-room");
    }

    //public async void SetHTML()
    //{
    //    if (string.IsNullOrEmpty(HotelRoomModel.Details))
    //    {
    //        await this.QuillHtml.LoadHTMLContent(HotelRoomModel.Details);
    //    }
    //    //notify component that the state has changed
    //    StateHasChanged();
    //}

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadImagePath = await fileUploadService.UploadFile(file);
                        images.Add(uploadImagePath);
                    }
                    else
                    {
                        await jsRuntime.SwalFailure("Please select .jpg, .jpeg, .png file only");
                    }
                }
                if (images.Any())
                {
                    if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                    {
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        HotelRoomModel.ImageUrls = new List<string>();
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    await jsRuntime.SwalFailure("Image uploading failed");
                    IsImageUploadProcessStarted = false;
                    return;
                }
            }
            IsImageUploadProcessStarted = false;
        }
        catch (Exception ex)
        {
            await jsRuntime.SwalFailure(ex.Message);
        }

    }

    private async Task AddHotelRoomImage(HotelRoomDTO hotelRoomDTO)
    {
        foreach (var imgUrl in HotelRoomModel.ImageUrls)
        {
            if (HotelRoomModel.HotelRoomImages == null || HotelRoomModel.HotelRoomImages.Where(x => x.RoomImageUrl == imgUrl).Count() == 0)
            {
                hotelRoomImageDTO = new HotelRoomImageDTO()
                {
                    RoomId = hotelRoomDTO.Id,
                    RoomImageUrl = imgUrl
                };
                await hotelroomImageRepository.CreateRoomImage(hotelRoomImageDTO);
            }

        }
    }

    internal async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = HotelRoomModel.ImageUrls.FindIndex(x => x == imageUrl);
            //var imageToRemove = HotelRoomModel.ImageUrls.Find(x => x == imageUrl);
            var imageName = imageUrl.Replace($"{navigationManager.BaseUri}RoomImages/", "");
            if (HotelRoomModel.Id == 0 && Title == "Create")
            {
                var result = fileUploadService.DeleteFile(imageName);

            }
            else if (HotelRoomModel.Id != 0 && Title == "Update")
            {
                //DeleteImageNames ??= new List<string>();
                if (DeleteImageUrls == null) DeleteImageUrls = new List<string>();
                DeleteImageUrls.Add(imageUrl);

            }
            //Delete from the UI
            HotelRoomModel.ImageUrls.RemoveAt(imageIndex);

        }
        catch (Exception ex)
        {
            await jsRuntime.SwalFailure(ex.Message);
        }
    }
}
