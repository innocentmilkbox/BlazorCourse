
<div class="modal fade" data-backdrop="static" data-keyboard="false" id="deleteConfirmationModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Confirm Delete</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="()=>OnConfirmationChanged(false)">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="()=>OnConfirmationChanged(false)">
                    Cancel
                </button>

                @if (IsProcessingStarted)
                {
                    <button type="button" class="btn btn-danger"><i class="fas fa-spinner"></i> Processing...</button>
                }
                else
                {
                    <button type="button" class="btn btn-danger" @onclick="()=>OnConfirmationChanged(true)">
                        Delete
                    </button>
                }

            </div>
        </div>
    </div>
</div>
@code {
    public bool IsProcessingStarted { get; set; } = false;
    [Parameter]
    public EventCallback<bool> ConfirmationChanged { get; set; }
    [Parameter]
    public bool ProcessSignalFromParent { get; set; }

    protected override void OnParametersSet()
    {
        IsProcessingStarted = ProcessSignalFromParent;
    }

    protected async Task OnConfirmationChanged(bool val)
    {
        if (val) IsProcessingStarted = true;
        await ConfirmationChanged.InvokeAsync(val);
        IsProcessingStarted = false;
    }
}
